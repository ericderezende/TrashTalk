{"ast":null,"code":"//Eric\nimport React from 'react';\n\nvar fs = require('fs');\n\nvar axios = require('axios');\n\nconst Converter = props => {\n  console.log(\"We Lit\");\n  let result, confidence;\n  let outputJSON;\n  axios.defaults.headers.common['Content-Type'] = \"application/json\";\n  axios.defaults.headers.common['Authorization'] = \"Bearer \"\n  /* Copy token key here */\n  ; // function to encode file data to base64 encoded string\n\n  const base64_encode = file => {\n    // read binary data\n    var bitmap = fs.readFileSync(file); // convert binary data to base64 encoded string\n\n    return new Buffer(bitmap).toString('base64');\n  };\n\n  var base = base64_encode('./images/20200201_175818.jpg');\n  axios.post(\"https://automl.googleapis.com/v1beta1/projects/766644774605/locations/us-central1/models/ICN5802549470285529088:predict\", {\n    \"payload\": {\n      \"image\": {\n        \"imageBytes\": base\n      }\n    }\n  }).then(function (res) {\n    if (Object.keys(res.data).length == 0) {\n      result = 'trash';\n      confidence = 99;\n    } else {\n      result = res.data.payload[0].displayName;\n      confidence = res.data.payload[0].classification.score;\n      confidence = confidence * 100;\n      confidence = Math.round(confidence);\n    }\n\n    let temp = {\n      \"result\": result,\n      \"confidence\": confidence\n    };\n    temp = JSON.stringify(temp);\n    outputJSON = JSON.parse(temp);\n    console.log(outputJSON);\n    fs.writeFile('output.json', JSON.stringify(outputJSON), 'utf8', (err, data) => {\n      if (err) console.log(err);else console.log('written');\n    });\n  }).catch(function (err) {\n    console.log(err);\n  });\n};\n\nexport default Converter;","map":{"version":3,"sources":["/Users/ericderezende/Dropbox/Dev/TrashTalk/src/components/converter.js"],"names":["React","fs","require","axios","Converter","props","console","log","result","confidence","outputJSON","defaults","headers","common","base64_encode","file","bitmap","readFileSync","Buffer","toString","base","post","then","res","Object","keys","data","length","payload","displayName","classification","score","Math","round","temp","JSON","stringify","parse","writeFile","err","catch"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,MAAME,SAAS,GAAIC,KAAD,IAAW;AAEzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEA,MAAIC,MAAJ,EAAYC,UAAZ;AACA,MAAIC,UAAJ;AAEAP,EAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IAAgD,kBAAhD;AACAV,EAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD;AAAS;AAA1D,GARyB,CASzB;;AACA,QAAMC,aAAa,GAAIC,IAAD,IAAS;AAC3B;AACA,QAAIC,MAAM,GAAGf,EAAE,CAACgB,YAAH,CAAgBF,IAAhB,CAAb,CAF2B,CAG3B;;AACA,WAAO,IAAIG,MAAJ,CAAWF,MAAX,EAAmBG,QAAnB,CAA4B,QAA5B,CAAP;AACH,GALD;;AAOA,MAAIC,IAAI,GAAGN,aAAa,CAAC,8BAAD,CAAxB;AACAX,EAAAA,KAAK,CAACkB,IAAN,CAAW,yHAAX,EACI;AACI,eAAW;AACP,eAAS;AACL,sBAAcD;AADT;AADF;AADf,GADJ,EAOOE,IAPP,CAOY,UAASC,GAAT,EAAa;AAEjB,QAAIC,MAAM,CAACC,IAAP,CAAYF,GAAG,CAACG,IAAhB,EAAsBC,MAAtB,IAAgC,CAApC,EAAsC;AAClCnB,MAAAA,MAAM,GAAG,OAAT;AACAC,MAAAA,UAAU,GAAG,EAAb;AACH,KAHD,MAGM;AACFD,MAAAA,MAAM,GAAGe,GAAG,CAACG,IAAJ,CAASE,OAAT,CAAiB,CAAjB,EAAoBC,WAA7B;AACApB,MAAAA,UAAU,GAAGc,GAAG,CAACG,IAAJ,CAASE,OAAT,CAAiB,CAAjB,EAAoBE,cAApB,CAAmCC,KAAhD;AACAtB,MAAAA,UAAU,GAAGA,UAAU,GAAG,GAA1B;AACAA,MAAAA,UAAU,GAAGuB,IAAI,CAACC,KAAL,CAAWxB,UAAX,CAAb;AACH;;AAED,QAAIyB,IAAI,GAAG;AACP,gBAAW1B,MADJ;AAEP,oBAAeC;AAFR,KAAX;AAKAyB,IAAAA,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAAP;AAEAxB,IAAAA,UAAU,GAAGyB,IAAI,CAACE,KAAL,CAAWH,IAAX,CAAb;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ;AACAT,IAAAA,EAAE,CAACqC,SAAH,CAAa,aAAb,EAA4BH,IAAI,CAACC,SAAL,CAAe1B,UAAf,CAA5B,EAAwD,MAAxD,EAAgE,CAAC6B,GAAD,EAAMb,IAAN,KAAe;AAC3E,UAAIa,GAAJ,EAASjC,OAAO,CAACC,GAAR,CAAYgC,GAAZ,EAAT,KACKjC,OAAO,CAACC,GAAR,CAAY,SAAZ;AACZ,KAHG;AAIP,GAhCD,EAgCGiC,KAhCH,CAgCS,UAASD,GAAT,EAAc;AACnBjC,IAAAA,OAAO,CAACC,GAAR,CAAYgC,GAAZ;AACH,GAlCD;AAoCH,CAtDD;;AAuDA,eAAenC,SAAf","sourcesContent":["//Eric\n\nimport React from 'react';\nvar fs = require('fs');\nvar axios = require('axios');\n\nconst Converter = (props) => {\n\n    console.log(\"We Lit\");\n\n    let result, confidence;\n    let outputJSON;\n\n    axios.defaults.headers.common['Content-Type'] = \"application/json\";\n    axios.defaults.headers.common['Authorization'] = \"Bearer \"/* Copy token key here */;\n    // function to encode file data to base64 encoded string\n    const base64_encode = (file) =>{\n        // read binary data\n        var bitmap = fs.readFileSync(file);\n        // convert binary data to base64 encoded string\n        return new Buffer(bitmap).toString('base64');\n    }\n\n    var base = base64_encode('./images/20200201_175818.jpg');\n    axios.post(\"https://automl.googleapis.com/v1beta1/projects/766644774605/locations/us-central1/models/ICN5802549470285529088:predict\",\n        {\n            \"payload\": {\n                \"image\": {\n                    \"imageBytes\": base\n                }\n            }\n        }).then(function(res){\n\n            if (Object.keys(res.data).length == 0){\n                result = 'trash'\n                confidence = 99;\n            } else{\n                result = res.data.payload[0].displayName;\n                confidence = res.data.payload[0].classification.score;\n                confidence = confidence * 100;\n                confidence = Math.round(confidence);\n            }\n\n            let temp = {\n                \"result\" : result,\n                \"confidence\" : confidence\n            };\n\n            temp = JSON.stringify(temp);\n\n            outputJSON = JSON.parse(temp);\n            console.log(outputJSON);\n            fs.writeFile('output.json', JSON.stringify(outputJSON), 'utf8', (err, data) => {\n                if (err) console.log(err);\n                else console.log('written');\n        });\n    }).catch(function(err) {\n        console.log(err);\n    });\n\n};\nexport default Converter;"]},"metadata":{},"sourceType":"module"}